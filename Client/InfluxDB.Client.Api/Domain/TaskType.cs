/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TaskType
    /// </summary>
    [DataContract]
    public partial class TaskType :  IEquatable<TaskType>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TaskStatusType? Status { get; set; }
        /// <summary>
        /// Defines LastRunStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LastRunStatusEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 1,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 2,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 3

        }

        /// <summary>
        /// Gets or Sets LastRunStatus
        /// </summary>
        [DataMember(Name="lastRunStatus", EmitDefaultValue=false)]
        public LastRunStatusEnum? LastRunStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskType" /> class.
        /// </summary>
        /// <param name="type">The type of task, this can be used for filtering tasks on list actions..</param>
        /// <param name="orgID">The ID of the organization that owns this Task. (required).</param>
        /// <param name="org">The name of the organization that owns this Task..</param>
        /// <param name="name">The name of the task. (required).</param>
        /// <param name="description">An optional description of the task..</param>
        /// <param name="status">status.</param>
        /// <param name="labels">labels.</param>
        /// <param name="authorizationID">The ID of the authorization used when this task communicates with the query engine..</param>
        /// <param name="flux">The Flux script to run for this task. (required).</param>
        /// <param name="every">A simple task repetition schedule; parsed from Flux..</param>
        /// <param name="cron">A task repetition schedule in the form &#39;* * * * * *&#39;; parsed from Flux..</param>
        /// <param name="offset">Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default..</param>
        /// <param name="links">links.</param>
        public TaskType(string type = default(string), string orgID = default(string), string org = default(string), string name = default(string), string description = default(string), TaskStatusType? status = default(TaskStatusType?), List<Label> labels = default(List<Label>), string authorizationID = default(string), string flux = default(string), string every = default(string), string cron = default(string), string offset = default(string), TaskLinks links = default(TaskLinks))
        {
            // to ensure "orgID" is required (not null)
            if (orgID == null)
            {
                throw new InvalidDataException("orgID is a required property for TaskType and cannot be null");
            }
            else
            {
                this.OrgID = orgID;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TaskType and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "flux" is required (not null)
            if (flux == null)
            {
                throw new InvalidDataException("flux is a required property for TaskType and cannot be null");
            }
            else
            {
                this.Flux = flux;
            }
            this.Type = type;
            this.Org = org;
            this.Description = description;
            this.Status = status;
            this.Labels = labels;
            this.AuthorizationID = authorizationID;
            this.Every = every;
            this.Cron = cron;
            this.Offset = offset;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The type of task, this can be used for filtering tasks on list actions.
        /// </summary>
        /// <value>The type of task, this can be used for filtering tasks on list actions.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the organization that owns this Task.
        /// </summary>
        /// <value>The ID of the organization that owns this Task.</value>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// The name of the organization that owns this Task.
        /// </summary>
        /// <value>The name of the organization that owns this Task.</value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }

        /// <summary>
        /// The name of the task.
        /// </summary>
        /// <value>The name of the task.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An optional description of the task.
        /// </summary>
        /// <value>An optional description of the task.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<Label> Labels { get; set; }

        /// <summary>
        /// The ID of the authorization used when this task communicates with the query engine.
        /// </summary>
        /// <value>The ID of the authorization used when this task communicates with the query engine.</value>
        [DataMember(Name="authorizationID", EmitDefaultValue=false)]
        public string AuthorizationID { get; set; }

        /// <summary>
        /// The Flux script to run for this task.
        /// </summary>
        /// <value>The Flux script to run for this task.</value>
        [DataMember(Name="flux", EmitDefaultValue=false)]
        public string Flux { get; set; }

        /// <summary>
        /// A simple task repetition schedule; parsed from Flux.
        /// </summary>
        /// <value>A simple task repetition schedule; parsed from Flux.</value>
        [DataMember(Name="every", EmitDefaultValue=false)]
        public string Every { get; set; }

        /// <summary>
        /// A task repetition schedule in the form &#39;* * * * * *&#39;; parsed from Flux.
        /// </summary>
        /// <value>A task repetition schedule in the form &#39;* * * * * *&#39;; parsed from Flux.</value>
        [DataMember(Name="cron", EmitDefaultValue=false)]
        public string Cron { get; set; }

        /// <summary>
        /// Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.
        /// </summary>
        /// <value>Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public string Offset { get; set; }

        /// <summary>
        /// Timestamp of latest scheduled, completed run, RFC3339.
        /// </summary>
        /// <value>Timestamp of latest scheduled, completed run, RFC3339.</value>
        [DataMember(Name="latestCompleted", EmitDefaultValue=false)]
        public DateTime? LatestCompleted { get; private set; }


        /// <summary>
        /// Gets or Sets LastRunError
        /// </summary>
        [DataMember(Name="lastRunError", EmitDefaultValue=false)]
        public string LastRunError { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public TaskLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  AuthorizationID: ").Append(AuthorizationID).Append("\n");
            sb.Append("  Flux: ").Append(Flux).Append("\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  Cron: ").Append(Cron).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  LatestCompleted: ").Append(LatestCompleted).Append("\n");
            sb.Append("  LastRunStatus: ").Append(LastRunStatus).Append("\n");
            sb.Append("  LastRunError: ").Append(LastRunError).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskType);
        }

        /// <summary>
        /// Returns true if TaskType instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null &&
                    this.OrgID.Equals(input.OrgID))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.AuthorizationID == input.AuthorizationID ||
                    (this.AuthorizationID != null &&
                    this.AuthorizationID.Equals(input.AuthorizationID))
                ) && 
                (
                    this.Flux == input.Flux ||
                    (this.Flux != null &&
                    this.Flux.Equals(input.Flux))
                ) && 
                (
                    this.Every == input.Every ||
                    (this.Every != null &&
                    this.Every.Equals(input.Every))
                ) && 
                (
                    this.Cron == input.Cron ||
                    (this.Cron != null &&
                    this.Cron.Equals(input.Cron))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.LatestCompleted == input.LatestCompleted ||
                    (this.LatestCompleted != null &&
                    this.LatestCompleted.Equals(input.LatestCompleted))
                ) && 
                (
                    this.LastRunStatus == input.LastRunStatus ||
                    (this.LastRunStatus != null &&
                    this.LastRunStatus.Equals(input.LastRunStatus))
                ) && 
                (
                    this.LastRunError == input.LastRunError ||
                    (this.LastRunError != null &&
                    this.LastRunError.Equals(input.LastRunError))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.Org != null)
                    hashCode = hashCode * 59 + this.Org.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.AuthorizationID != null)
                    hashCode = hashCode * 59 + this.AuthorizationID.GetHashCode();
                if (this.Flux != null)
                    hashCode = hashCode * 59 + this.Flux.GetHashCode();
                if (this.Every != null)
                    hashCode = hashCode * 59 + this.Every.GetHashCode();
                if (this.Cron != null)
                    hashCode = hashCode * 59 + this.Cron.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.LatestCompleted != null)
                    hashCode = hashCode * 59 + this.LatestCompleted.GetHashCode();
                if (this.LastRunStatus != null)
                    hashCode = hashCode * 59 + this.LastRunStatus.GetHashCode();
                if (this.LastRunError != null)
                    hashCode = hashCode * 59 + this.LastRunError.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

    }

}
