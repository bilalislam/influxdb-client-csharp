/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// DBRPs
    /// </summary>
    [DataContract]
    public partial class DBRPs :  IEquatable<DBRPs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DBRPs" /> class.
        /// </summary>
        /// <param name="notificationEndpoints">notificationEndpoints.</param>
        /// <param name="links">links.</param>
        public DBRPs(List<DBRP> notificationEndpoints = default(List<DBRP>), Links links = default(Links))
        {
            this.NotificationEndpoints = notificationEndpoints;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets NotificationEndpoints
        /// </summary>
        [DataMember(Name="notificationEndpoints", EmitDefaultValue=false)]
        public List<DBRP> NotificationEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DBRPs {\n");
            sb.Append("  NotificationEndpoints: ").Append(NotificationEndpoints).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DBRPs);
        }

        /// <summary>
        /// Returns true if DBRPs instances are equal
        /// </summary>
        /// <param name="input">Instance of DBRPs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DBRPs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotificationEndpoints == input.NotificationEndpoints ||
                    this.NotificationEndpoints != null &&
                    this.NotificationEndpoints.SequenceEqual(input.NotificationEndpoints)
                ) && 
                (
                    
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotificationEndpoints != null)
                    hashCode = hashCode * 59 + this.NotificationEndpoints.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

    }

}
