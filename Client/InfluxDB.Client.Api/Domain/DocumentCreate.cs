/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// DocumentCreate
    /// </summary>
    [DataContract]
    public partial class DocumentCreate :  IEquatable<DocumentCreate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCreate" /> class.
        /// </summary>
        /// <param name="meta">meta (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="org">The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;..</param>
        /// <param name="orgID">The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;..</param>
        /// <param name="labels">An array of label IDs to be added as labels to the document..</param>
        public DocumentCreate(DocumentMeta meta = default(DocumentMeta), Object content = default(Object), string org = default(string), string orgID = default(string), List<string> labels = default(List<string>))
        {
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new InvalidDataException("meta is a required property for DocumentCreate and cannot be null");
            }
            else
            {
                this.Meta = meta;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for DocumentCreate and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            this.Org = org;
            this.OrgID = orgID;
            this.Labels = labels;
        }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public DocumentMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public Object Content { get; set; }

        /// <summary>
        /// The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;.
        /// </summary>
        /// <value>The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;.</value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }

        /// <summary>
        /// The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;.
        /// </summary>
        /// <value>The organization Name. Specify either &#x60;orgID&#x60; or &#x60;org&#x60;.</value>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// An array of label IDs to be added as labels to the document.
        /// </summary>
        /// <value>An array of label IDs to be added as labels to the document.</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentCreate {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentCreate);
        }

        /// <summary>
        /// Returns true if DocumentCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null &&
                    this.OrgID.Equals(input.OrgID))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Org != null)
                    hashCode = hashCode * 59 + this.Org.GetHashCode();
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                return hashCode;
            }
        }

    }

}
