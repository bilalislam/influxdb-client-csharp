/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Expression
    /// </summary>
    [DataContract]
    public partial class Expression :  IEquatable<Expression>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Expression" /> class.
        /// </summary>
        public Expression(string type = default(string), List<Expression> elements = default(List<Expression>), List<Property> _params = default(List<Property>), Node body = default(Node), string _operator = default(string), Expression left = default(Expression), Expression right = default(Expression), Expression callee = default(Expression), List<Expression> arguments = default(List<Expression>), Expression test = default(Expression), Expression alternate = default(Expression), Expression consequent = default(Expression), Expression _object = default(Expression), PropertyKey property = default(PropertyKey), Expression array = default(Expression), Expression index = default(Expression), List<Property> properties = default(List<Property>), Expression expression = default(Expression), Expression argument = default(Expression), CallExpression call = default(CallExpression), string value = default(string), List<Duration> values = default(List<Duration>), string name = default(string))
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Expression {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Expression);
        }

        /// <summary>
        /// Returns true if Expression instances are equal
        /// </summary>
        /// <param name="input">Instance of Expression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Expression input)
        {
            if (input == null)
                return false;

            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }

    }

}
