/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// RunLog
    /// </summary>
    [DataContract]
    public partial class RunLog :  IEquatable<RunLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunLog" /> class.
        /// </summary>
        /// <param name="runID">runID.</param>
        /// <param name="time">time.</param>
        /// <param name="message">message.</param>
        public RunLog(string runID = default(string), string time = default(string), string message = default(string))
        {
            this.RunID = runID;
            this.Time = time;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets RunID
        /// </summary>
        [DataMember(Name="runID", EmitDefaultValue=false)]
        public string RunID { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunLog {\n");
            sb.Append("  RunID: ").Append(RunID).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunLog);
        }

        /// <summary>
        /// Returns true if RunLog instances are equal
        /// </summary>
        /// <param name="input">Instance of RunLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RunID == input.RunID ||
                    (this.RunID != null &&
                    this.RunID.Equals(input.RunID))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunID != null)
                    hashCode = hashCode * 59 + this.RunID.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

    }

}
